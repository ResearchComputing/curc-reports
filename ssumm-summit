#!/bin/bash

# "ssumm" = "Slurm Summary"
# Initial author: J. Loptien, CU-RC
# Modifications: P. Ruprecht, CU-RC


# Important time variable (epoch seconds)
export SLURM_TIME_FORMAT=%s

# sacct cmd
CMD='sacct -P -n -T -a'

# QoS range
#RANGE="blanca-ics"

help () {
	echo "Usage: ssumm -s <starttime> -e <endtime> [-q qos>] [-A <account>]"
	echo "  Required:"
	echo "    : -s <starttime> eg 2015-01-01T00:00:00"
	echo "    : -e <endtime>   eg 2015-01-31T23:59:59"
	echo "  Optional:"
	echo "    : -q <qos>       eg -q debug"
	echo "    : -A <account>   eg -A ucb1_summit1"
	echo "    : -d             Add sacct command output"
}

report () {
        # Get some job info for the time range
        $CMD --start=${START} --end=${END} --format=jobid,submit,start,end,alloccpus,maxrss,user | grep -iv unknown > /tmp/reports.raw
	if [[ $DEBUG == 1 ]]
	then
	#	echo "sacct command run:  $CMD --start=${START} --end=${END} --qos=${QOS} --format=jobid,submit,start,end,alloccpus,maxrss,user | grep -iv unknown"
		echo "debugging facility not implemented"
	fi
	# remove jobs whose end time is earlier than start time (probably they are still running)
	awk -F '|' '$4 > $3' /tmp/reports.raw > /tmp/reports.tmp
        TOTAL_JOBS=`grep -v '[0-9]\.' /tmp/reports.tmp | wc -l | awk '{print $1}'`
        if [[ $TOTAL_JOBS == 0 ]]
        then
                echo ""
                #echo "No jobs for time period"
                continue
        fi
	DATE=`echo ${START} | awk -F'-' '{print $2"/"$1}'`
        MED_JOB=`echo $((${TOTAL_JOBS}/2))`  # used to calculate median queue wait time and wall time
        # Do some math for desired data
        WAIT=`grep -v '[0-9]\.' /tmp/reports.tmp | awk -F'|' '{sum+=($3-$2)} END {print sum}'`
        MED_WAIT=`grep -v '[0-9]\.' /tmp/reports.tmp | awk -F'|' '{print $3-$2}' | sort -n | sed -n "${MED_JOB}p"`  # median wait time
        #MED_MEM_JOB=`grep "K$" /tmp/reports.tmp | wc -l`
        #MED_MEM_JOB=`echo $((${MED_MEM_JOB}/2))`
        #MED_MEM=`grep "K$" /tmp/reports.tmp | awk -F'|' '{print $6}' | sort -n | sed -n "${MED_MEM_JOB}p"`
        #MAX_MEM=`grep "K$" /tmp/reports.tmp | awk -F'|' '{print $6}' | sort -n | tail -n 1`
        WALL=`grep -v '[0-9]\.' /tmp/reports.tmp | awk -F'|' '{WALL+=($4-$3)} END {print WALL}'`
        MED_WALL=`grep -v '[0-9]\.' /tmp/reports.tmp | awk -F'|' '{print ($4-$3)}' | sort -n | sed -n "${MED_JOB}p"`  # median wall time
        SU=`grep -v '[0-9]\.' /tmp/reports.tmp | awk -F'|' '{SU+=($4-$3)*$5} END {print SU}'`  # reported in seconds
        SU=`bc <<< "scale=2;${SU}/3600"`   # translate to core-hours
	# get information on user accounts in the allocation account
	USERS=` sacctmgr -p -n show account ${ALLOC} withassoc | awk -F'|' '{print $6}' | grep -v ^$`
        USER_INFO=$(for U in $USERS
        do
                USER_SU=`grep -v '[0-9]\.' /tmp/reports.tmp | grep ${U} | awk -F'|' '{SU+=($4-$3)*$5} END {print SU}'`
                USER_SU=`bc <<< "scale=2;${USER_SU}/3600"`
                USER_PCT=`bc <<< "scale=2;${USER_SU}/${SU}*100"`
                if [[ $USER_SU == "" ]]
                then
                        USER_SU=0
                        USER_PCT=0
                fi
                GIVEN=`getent passwd $U | awk -F':' '{print $5}' | awk '{gsub(/,,+/,"")}1'`
                if [[ $GIVEN =~ ., ]]
                then
                        GIVEN=`echo $GIVEN | awk -F',' '{print $2 " " $1}' | sed 's/^ //g'`
                fi
                echo -e "  ${U} - ${GIVEN}: ${USER_SU} (${USER_PCT}%)"
        done)  #  Future work - should sort the list by SU
	
	# Get fairshare target SU for allocation; assumes that shares are set up as (annual target SU / 10000)
	TARG_SCALED=`sshare | grep " $ALLOC " | head -1 | awk '{print $2}'`	
	TARG_SU=`bc <<< "${TARG_SCALED}*10000/12"`  # scale to a monthly target
	# The above logic does not correctly report target SU for non-project or -condo allocations
	if [[ ! $ALLOC =~ summit ]]; then
		TARG_SU="N/A"
	fi

	read -d '' String <<EOF

This report contains information regarding the allocation account named ${ALLOC} on the "RMACC Summit" supercomputer.  Please review it and email rc-help@colorado.edu if you have any questions.

Allocation: $ALLOC 
Reporting period: ${START} - ${END}
Number of jobs run: ${TOTAL_JOBS}
Total SU used: ${SU} 
Fairshare Target SU: $TARG_SU per month
Median queue wait time: ${MED_WAIT} seconds
Median wall time: ${MED_WALL} seconds

The following users are authorized to run jobs in ${ALLOC}.  The number of SU used by each during the reporting period is also listed.
${USER_INFO}

EOF
	echo "$String"

}

while getopts ":s:e:A:q:d" opt; do
case $opt in
	s)
		START=$OPTARG
		;;
	e)
		END=$OPTARG
		;;
	A)
		CMD="sacct -P -n -T -a -A ${OPTARG}"
		ALLOC=$OPTARG
		;;
	q)
		RANGE=${OPTARG}
		;;
	d)
		DEBUG=1
		;;
	\?)
		help
		exit 0
		;;
esac
done

if [[ -z $START || -z $END ]]
then
	help
	exit 1
fi

#for QOS in $RANGE
#do
	report 2>/dev/null
	rm -f /tmp/reports.tmp
	rm -f /tmp/reports.raw
#done

